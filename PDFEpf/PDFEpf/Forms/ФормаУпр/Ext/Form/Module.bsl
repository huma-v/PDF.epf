&НаКлиенте
Перем мКаталогРесурсов;

&НаКлиенте
Перем мДокументPDF;


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	лОбъект = РеквизитФормыВЗначение("Объект");
	
	лСтруктураРесурсов = Новый Структура;
	лСтруктураРесурсов.Вставить("АрхивРесурсов", лОбъект.ПолучитьМакет("АрхивРесурсов"));
	лСтруктураРесурсов.Вставить("ДокументPDF", лОбъект.ПолучитьМакет("ДокументPDF"));
	
	АдресВХРесурсов = ПоместитьВоВременноеХранилище(лСтруктураРесурсов);
КонецПроцедуры


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	лСтруктураВХ = ПолучитьИзВременногоХранилища(АдресВХРесурсов);
	
	мДокументPDF = лСтруктураВХ.ДокументPDF;
	УстановитьРесурсы(Новый ОписаниеОповещения("ПриОткрытии_ПослеУстановкиРесурсов", ЭтаФорма), лСтруктураВХ.АрхивРесурсов);
КонецПроцедуры


&НаКлиенте
Процедура ПриОткрытии_ПослеУстановкиРесурсов(Результат, ДополнительныеПараметры) Экспорт
	ДокументHTML = ФайловыйURL(мКаталогРесурсов + ПолучитьРазделительПути() + "web" + ПолучитьРазделительПути() + "viewer.html");
КонецПроцедуры


&НаКлиенте
Процедура ОболочкаPDFГотова()
	lPDFApp = Элементы.ДокументHTML.Документ.defaultView.PDFViewerApplication;
	lPDFApp.openBase64(СтрЗаменить(Base64Строка(мДокументPDF), Символы.ВК + Символы.ПС, ""));
КонецПроцедуры


&НаКлиенте
Процедура УстановитьРесурсы(ОбработчикПродолжения = Неопределено, АрхивРесурсов)
	НачатьПолучениеРабочегоКаталогаДанныхПользователя(Новый ОписаниеОповещения("УстановитьРесурсы_ПослеПолученияРабочегоКаталога", ЭтаФорма, Новый Структура("ОбработчикПродолжения, АрхивРесурсов", ОбработчикПродолжения, АрхивРесурсов)));
КонецПроцедуры


&НаКлиенте
Процедура УстановитьРесурсы_ПослеПолученияРабочегоКаталога(КаталогДанныхПользователя, ДополнительныеПараметры) Экспорт
	лРазд = ПолучитьРазделительПутиКлиента();
	
	мКаталогРесурсов = КаталогДанныхПользователя + "pdfview";
	
	НачатьСозданиеКаталога(Новый ОписаниеОповещения("УстановитьРесурсы_ПослеСозданияКаталогаРесурсов", ЭтотОбъект, ДополнительныеПараметры), мКаталогРесурсов);
КонецПроцедуры


&НаКлиенте
Процедура УстановитьРесурсы_ПослеСозданияКаталогаРесурсов(ИмяКаталога, ДополнительныеПараметры) Экспорт
	лРазд = ПолучитьРазделительПутиКлиента();
	
	лФайлВерсии = Новый Файл(мКаталогРесурсов + лРазд + "version");
	лФайлВерсии.НачатьПроверкуСуществования(Новый ОписаниеОповещения("УстановитьРесурсы_ПослеПроверкиСуществованияФайлаВерсии", ЭтаФорма, ДополнительныеПараметры));
КонецПроцедуры


&НаКлиенте
Процедура УстановитьРесурсы_ПослеПроверкиСуществованияФайлаВерсии(Существует, ДополнительныеПараметры) Экспорт
	лРазд = ПолучитьРазделительПутиКлиента();
	лФайлВерсии = Новый Файл(мКаталогРесурсов + лРазд + "version");
	Если Существует Тогда
		лЧтениеJSON = Новый ЧтениеJSON;
		лЧтениеJSON.ОткрытьФайл(лФайлВерсии.ПолноеИмя);
		лПредВерсия = ПрочитатьJSON(лЧтениеJSON);
		лЧтениеJSON.Закрыть();
		Если лПредВерсия = ВерсияРесурсов() Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикПродолжения);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	НачатьУдалениеФайлов(Новый ОписаниеОповещения("УстановитьРесурсы_ПослеУдаленияКаталогаРесурсов", ЭтаФорма, ДополнительныеПараметры), мКаталогРесурсов, "*");
КонецПроцедуры


&НаКлиенте
Процедура УстановитьРесурсы_ПослеУдаленияКаталогаРесурсов(ДополнительныеПараметры) Экспорт
	лРазд = ПолучитьРазделительПутиКлиента();
	лФайлВерсии = Новый Файл(мКаталогРесурсов + лРазд + "version");
	
	лПоток = Новый ПотокВПамяти(ПолучитьБуферДвоичныхДанныхИзДвоичныхДанных(ДополнительныеПараметры.АрхивРесурсов));
	лЧтениеZIP = Новый ЧтениеZipФайла(лПоток);
	лЧтениеZIP.ИзвлечьВсе(мКаталогРесурсов);
	лЧтениеZIP.Закрыть();
	
	лПоток.НачатьЗакрытие(Новый ОписаниеОповещения("УстановитьРесурсы_ПослеЗакрытияПотока", ЭтаФорма, ДополнительныеПараметры.ОбработчикПродолжения));
КонецПроцедуры


&НаКлиенте
Процедура УстановитьРесурсы_ПослеЗакрытияПотока(ОбработчикПродолжения) Экспорт
	лРазд = ПолучитьРазделительПутиКлиента();
	лФайлВерсии = Новый Файл(мКаталогРесурсов + лРазд + "version");
	
	лЗаписьJSON = Новый ЗаписьJSON;
	лЗаписьJSON.ОткрытьФайл(лФайлВерсии.ПолноеИмя);
	ЗаписатьJSON(лЗаписьJSON, ВерсияРесурсов());
	лЗаписьJSON.Закрыть();
	
	ВыполнитьОбработкуОповещения(ОбработчикПродолжения);
КонецПроцедуры


&НаКлиентеНаСервереБезКонтекста
Функция ФайловыйURL(Путь)
	лФайл = Новый Файл(Путь);
	лПолныйПуть = лФайл.ПолноеИмя;
	
	лПолныйПуть = СтрЗаменить(лПолныйПуть, "\", "/");
	Если Сред(лПолныйПуть, 2, 1) = ":" Тогда
		Возврат "file:///" + лПолныйПуть;
	Иначе
		Возврат "file://" + лПолныйПуть;
	КонецЕсли;
КонецФункции


&НаКлиенте
Процедура ДокументHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	Если ДанныеСобытия.Event.srcElement.id = "1cReadyCallback" Тогда
		ОболочкаPDFГотова();
		ДанныеСобытия.Event.returnValue = Ложь
	КонецЕсли;
КонецПроцедуры


&НаКлиентеНаСервереБезКонтекста
Функция ВерсияРесурсов()
	Возврат 1;
КонецФункции
